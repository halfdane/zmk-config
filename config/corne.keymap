/*
 * Seth's Corne/crkbd keymap using ZMK
 * Based off of miryoku
 * https://github.com/sethdwoolley/zmk-config
 *
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer Definitions
#define DEFAULT 0
#define NAVI 1
#define MEDIA 2
#define NUM 3
#define FUNC 4
#define NONE 0

// TODO
// Change right index LSFT on numbers layer to shift to alternative shift layer, 
// with everything shifted except the left thumb keys being ( )
// (waiting on ZMK extended keycode support)

/ {
//  Homerow mod held behaviour 
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };


// HELD on each layer shows which key(s) are being held to access that layer
// #'s signify the split

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// -------------------------------------------------------------------------------------------------------------------------------------
// |   |   Q     |   W    |       F      |    P          |  B       |  #  |    J     |      L      |      U      |    Y      |   '    ||
// |   | A/LGUI  | R/LALT |    S/LCTL    |  T/LSFT       | G/ALT_GR |  #  | M/ALT_GR |    N/RSFT   |   E/LCTRL   | I/LALT    | O/LGUI ||
// |   |   Z     |   X    |       C      |    D          |  V       |  #  |    K     |      H      |      ,      |    .      |   /    ||
//                        | LT MEDIA ESC | LT NAVI SPACE | TAB      |  #  |    RET   | LT NUM BKSP | LT FUNC DEL |

            bindings = <
&none &kp Q        &kp W        &kp F          &kp P      &kp B           &kp J        &kp L        &kp U          &kp Y      &kp SINGLE_QUOTE &none
&none &hm LGUI A   &hm LALT R   &hm LCTL S     &hm LSFT T &hm RALT G      &hm RALT M   &hm RSFT N   &hm RCTL E     &hm LALT I &hm RGUI O       &none
&none &kp Z        &kp X        &kp C          &kp D      &kp V           &kp K        &kp H        &kp COMMA      &kp DOT    &kp FSLH         &none
                                &lt MEDIA ESC &lt NAVI SPACE &kp TAB      &kp RET      &lt NUM BKSP &lt FUNC DEL
            >;
        };

        navigation {
// ---------------------------------------------------------------------------------------
// |     | RESET  |      |          |        |        | # | REDO     | PASTE   | COPY    | CUT   | UNDO |     |
// |     | LGUI   | LALT | LCTL     | LSFT   | ALT_GR | # | CAPS     | LFT     |  DWN    |  UP   | RGT  |     |
// |     |        | CUT  | COPY     |        | PASTE  | # | INS      | HOME    | PGDN    | PGUP  | END  |     |
//                       | BTCLR    | HELD   | TAB    | # | RET      | BKSP    |  DEL  |

            bindings = <
&none    &reset    &trans   &trans   &trans   &trans       &kp K_REDO &kp PSTE &kp COPY  &kp CUT   &kp UNDO &none
&none    &kp LGUI  &kp LALT &kp LCTL &kp LSFT &kp RALT     &kp CAPS   &kp LARW &kp DARW  &kp UARW  &kp RARW &none
&none    &trans    &kp CUT  &kp COPY &trans   &kp PSTE     &kp INS    &kp HOME &kp PGDN  &kp PGUP  &kp END  &none
                          &bt BT_CLR &trans   &kp TAB      &kp RET    &kp BKSP &kp DEL
            >;  
        };

        media_keys {
// ---------------------------------------------------------------------------------------
// |     | RESET  |      |          |        |        | # |      |              |           |          |      |     |
// |     | LGUI   | LALT | LCTL     | LSFT   | ALT_GR | # |      | PREV         | VOLD      | VOLU     | NEXT |     |
// |     |        |      |          |        |        | # |      |              |           |          |      |     |
//                       | HELD     | SPACE  | TAB    | # | STOP | PLAY         | MUTE |

            bindings = <
&none    &reset    &trans   &trans   &trans   &trans       &trans     &trans     &trans     &trans     &trans     &none
&none    &kp LGUI  &kp LALT &kp LCTL &kp LSFT &kp RALT     &trans     &kp M_PREV &kp M_VOLD &kp M_VOLU &kp M_NEXT &none
&none    &trans    &trans   &trans   &trans   &trans       &trans     &trans     &trans     &trans     &trans     &none
                          &trans   &kp SPACE  &kp TAB      &kp M_STOP &kp M_PLAY &kp M_MUTE
            >;
        };

        numbers {
// ---------------------------------------------------------------------------------
// |     |  [{     |  7       |  8      |  9      |  ]}   | # |        |        |         |         | RESET |     |
// |     |  ;:     |  4       |  5      |  6      |  =+   | # | ALT_GR | RSFT   | CTRL    | LALT    | RGUI  |     |
// |     |  `~     |  1       |  2      |  3      |  \|   | # |        |        |         |         |       |     |
//                            |  .      |  0      |   -_  | # |        | HELD   |         |

            bindings = <
&none    &kp LBKT  &kp NUM_7  &kp NUM_8 &kp NUM_9 &kp RBKT     &trans   &trans   &trans    &trans    &reset    &none
&none    &kp SEMI  &kp NUM_4  &kp NUM_5 &kp NUM_6 &kp EQL      &kp RALT &kp RSFT &kp RCTL  &kp LALT  &kp RGUI  &none
&none    &kp GRAVE &kp NUM_1  &kp NUM_2 &kp NUM_3 &kp BSLH     &trans   &trans   &kp RALT  &trans    &trans    &none
                              &kp DOT   &kp NUM_0 &kp MINUS    &trans   &trans   &trans
            >;
        };

        function_keys {
// -------------------------------------------------------------------------------------
// |  |  F12    | F7  |  F8  |  F9  | PTSRN            | # |        |        |         |         | RESET |     |
// |  |  F11    | F4  |  F5  |  F6  | SCRLL            | # | ALT_GR | RSFT   | CTRL    | LALT    | RGUI  |     |
// |  |  F10    | F1  |  F2  |  F3  | PAUSE            | # |        |        |         |         |       |     |
//                    |      |      | TAB              | # |        |        | HELD    |

            bindings = <
&none &kp F12 &kp F7 &kp F8 &kp F9 &kp PSCRN                &trans   &trans   &trans    &trans    &reset    &none
&none &kp F11 &kp F4 &kp F5 &kp F6 &kp SLCK                 &kp RALT &kp RSFT &kp RCTL  &kp LALT  &kp RGUI  &none
&none &kp F10 &kp F1 &kp F2 &kp F3 &kp PAUSE_BREAK          &trans   &trans   &kp RALT  &trans    &trans    &none
                      &trans &trans &trans                  &trans   &trans   &trans
            >;
        };
    };
};
